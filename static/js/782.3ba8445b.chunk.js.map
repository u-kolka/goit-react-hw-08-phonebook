{"version":3,"file":"static/js/782.3ba8445b.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["export const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;","// extracted by mini-css-extract-plugin\nexport default {\"contact__item\":\"Contact_contact__item__pT95f\",\"contact__btn\":\"Contact_contact__btn__-eCRZ\"};","import PropTypes from \"prop-types\";\nimport { toast } from 'react-toastify';\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact } from 'redux/contacts/operations';\nimport css from \"./Contact.module.css\";\n\nconst Contact = ({ name, number, contactID }) => {\n    const dispatch = useDispatch();\n    const handleDelete = () => {\n        dispatch(deleteContact(contactID));\n        toast.info(name + ' has been deleted from the contact list!', {icon: \"🚀\"});\n    };\n    \n    return (\n        <li className={css.contact__item}>\n            <p>{name}: {number}</p>\n            <button className={css.contact__btn} onClick={handleDelete}>Delete</button>\n        </li>\n    );\n};\n\nContact.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    contactID: PropTypes.string.isRequired,\n};\n\nexport default Contact;","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from 'redux/contacts/operations';\nimport Contact from 'components/Contact/Contact';\n  \nconst getFilteredContacts = (contacts, filterValue) => {\n  if (filterValue) {\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filterValue));\n  };\n  return contacts;\n  };\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n  const filterValue = useSelector(state => state.filter);\n  const filteredContacts = getFilteredContacts(contacts, filterValue);\n  // console.log(filteredContacts)\n  useEffect(() => {\n  // async function fetchData() {\n    dispatch(fetchContacts())\n  // }\n  // fetchData();\n}, [dispatch]); \n\n  return (\n    <ul>\n      {filteredContacts.length > 0 && filteredContacts.map(item =>\n        <Contact key={item.id} name={item.name} number={item.number} contactID={item.id} />)}\n    </ul>)\n}\n\nexport default ContactList;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"form__label\":\"ContactForm_form__label__8W82B\",\"form__btn\":\"ContactForm_form__btn__WXQ4e\"};","import { nanoid } from 'nanoid';\nimport { toast } from 'react-toastify';\nimport { useDispatch, useSelector  } from \"react-redux\";\nimport { addContact } from 'redux/contacts/operations';\nimport css from './ContactForm.module.css'\n\nfunction ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n  const nameInputId = nanoid(7);\n  const numberInputId = nanoid(7);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n\n    for (let contact of contacts) {\n        console.log(contact)\n      if (form.elements.name.value.toLowerCase() === contact.name.toLowerCase()) {\n        return toast.info(form.elements.name.value + ' is already in contacts!', {icon: \"🚀\"});\n      }\n    }\n\n    dispatch(addContact({\n      name: form.elements.name.value,\n      number: form.elements.number.value,\n    }));\n    toast.info(form.elements.name.value + ' has been added to the contact list!', {icon: \"🚀\"});\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label className={css.form__label} htmlFor={nameInputId}> Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          id={nameInputId}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={css.form__label} htmlFor={numberInputId}> Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          id={numberInputId}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        ></input>\n      </label>\n      <button className={css.form__btn} type='submit'>Add contact</button>\n    </form>\n  );\n}\n\nexport default ContactForm;","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","// extracted by mini-css-extract-plugin\nexport default {\"filter__label\":\"Filter_filter__label__ttfPR\",\"filter__input\":\"Filter_filter__input__toa89\"};","import { useDispatch } from \"react-redux\";\nimport { setFilter } from \"redux/contacts/filterSlice\";\nimport css from \"./Filter.module.css\";\n\nconst Filter = () => {\n    const dispatch = useDispatch();\n    const changeFilterField = event => {\n        const flterFieldValue = event.currentTarget.value.toLowerCase();\n        dispatch(setFilter(flterFieldValue));\n    };\n\n    return (\n        <label className={css.filter__label}> Find contacts by name\n            <input className={css.filter__input} type=\"text\" onChange={changeFilterField} />\n        </label>\n    )\n};\n\nexport default Filter;","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport ContactList from 'components/ContactList/ContactList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your Contacts</title>\n      </Helmet>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </>\n  );\n}"],"names":["selectLoading","state","contacts","loading","name","number","contactID","dispatch","useDispatch","className","css","onClick","deleteContact","toast","icon","filteredContacts","filterValue","filter","contact","toLowerCase","includes","getFilteredContacts","useSelector","items","useEffect","fetchContacts","length","map","item","id","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nameInputId","numberInputId","onSubmit","event","preventDefault","form","target","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","console","log","elements","addContact","reset","htmlFor","type","pattern","title","required","onChange","flterFieldValue","currentTarget","setFilter","Contacts","isLoading","Helmet"],"sourceRoot":""}